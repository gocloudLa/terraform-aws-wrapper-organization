module_name: Terraform AWS Organization Module
module_description: The Terraform Wrapper for AWS Organization.
module_badges:
  - url: "https://github.com/gocloudLa/terraform-aws-wrapper-organization/releases/latest"
    image: "https://img.shields.io/github/v/release/gocloudLa/terraform-aws-wrapper-organization.svg?style=for-the-badge"
    alt: "Latest Release"
  - url: ""
    image: "https://img.shields.io/github/last-commit/gocloudLa/terraform-aws-wrapper-organization.svg?style=for-the-badge"
    alt: "Last Commit"
  - url: "https://registry.terraform.io/modules/gocloudLa/wrapper-organization/aws"
    image: "https://img.shields.io/badge/Terraform-Registry-7B42BC?style=for-the-badge&logo=terraform&logoColor=white"
    alt: "Terraform Registry"
quick_start: |
  ```hcl
  organization_parameters = {
      enable_organization = true
  
      aws_service_access_principals = [
        "cloudtrail.amazonaws.com",
        "sso.amazonaws.com",
        "ram.amazonaws.com"
      ]
      feature_set = "ALL"
  
      organizational_units = {
        "Transitional" = {
          ou_policies = {
            "tag-convention" = {}
            "governance"     = {}
            "compliance"     = {}
          }
        }
        "Workload" = {
          ou_policies = {
            "tag-convention"      = {}
            "aws-backup-deletion" = {}
            "governance"          = {}
            "compliance"          = {}
  
          }
        }
        "Sandbox" = {
          ou_policies = {
            "tag-convention" = {}
            "governance"     = {}
            "compliance"     = {}
          }
        }
      }
  
      accounts = {
        # ROOT
        "${local.metadata.public_domain}" = {
          email                             = "email@domain.com",
          parent_id                         = "",
          allow_iam_users_access_to_billing = true
        }
        # NEW
        "${local.metadata.public_domain}-dev" = {
          email                             = "email+dev@domain.com",
          parent_id                         = "Workload",
          allow_iam_users_access_to_billing = true
        }
        "${local.metadata.public_domain}-lab" = {
          email                             = "email+lab@domain.com",
          parent_id                         = "Sandbox",
          allow_iam_users_access_to_billing = true
        }
      }
    }
  ```
features:
  - icon: ðŸ“¥
    title: Importing accounts
    short_description: Imports root or other accounts into organization state
    long_description: |
      To import the root account or another account into the State of the organization wrapper, we must follow the following steps:
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          ## Ejecutamos `terraform pull` para traernos el State del backend que utilicemos
          terraform pull state > terraform.tfstate
          
          ## Una vez hecho el pull ajustaremos el archivo backend.tf del workspace para usar el backend local 
          terraform {
            backend "local" {
              path = "./terraform.tfstate"
            }
          }
          
          ## Definimos la cuenta que queremos importar en el codigo dentro del main.tf, el nombre de la cuenta debe ser igual al de la cuenta importada, el mail se puede obtener viendo los detalles  de la cuenta
              accounts = {
                "ACCOUNT-NAME" = {
                  email                             = "ACCOUNT-MAIL",
                  parent_id                         = "",
                  allow_iam_users_access_to_billing = true
                }
                .
                .
                .
              }
          
          ## Ejecutamos el comando `terraform import`, el ACCOUNT-NAME se debe tomar de la key que se utiliza para nombrar la cuenta, el ACCOUNT-ID es el nÃºmero de cuenta
          terraform import 'module.organization.module.wrapper_organization.module.organization.aws_organizations_account.this["ACCOUNT-NAME"]' ACCOUNT-ID
          
          ## Ajustamos manualmente en el terraform.tfstate los siguientes parametros para evitar que nos intente recrear la cuenta, podemos filtrar dentro de la cuenta buscando la siguiente linea `type": "aws_organizations_account",`:
                "module": "module.organization.module.wrapper_organization.module.organization",
                "mode": "managed",
                "type": "aws_organizations_account",
                "name": "this",
                "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
                "instances": [
                  {
                    "index_key": "ACCOUNT-NAME",
                    "schema_version": 0,
                    "attributes": {
                      .
                      .
                      .
                      "close_on_deletion": false,
                      "create_govcloud": false,
                      .
                      .
                      .
                      "iam_user_access_to_billing": "ALLOW",
                      .
                      .
                      .
                    }
                  }
                ]
          
          ## Validamos con un plan si esta todo correcto
          terraform plan
          
          ## Si el plan no muestra cambios, seteamos nuevamente el backend original y pusheamos el State
          terraform state push ./terraform.tfstate
          ```
important_notes: |
  - **ðŸš¨ Do Not Apply Terraform Changes Until Plan Shows Up:** Do not apply Terraform changes until the plan shows that changes need to be applied - this prevents accidentally overwri
input_table: |
  | enable_organization | Enables or disables the organization service verification. | `bool` | `false` | no |
  | aws_service_access_principals | A list of principal services that will be enabled at an organization level. | `list` | `["cloudtrail.amazonaws.com"]` | no |
  | feature_set | Allows the configuration of the billing in the accounts that will be created. | `string` | `ALL` | no |
  | organizational_units | A map of OUs that will be created. | `any` | `{}` | no |
  | accounts | A map of accounts that will be created under an organization or OU. | `any` | `{}` | no |
  | enabled_policy_types | A map of policies that will be created and later attached to an account or OU. | `any` | `{}` | no |
  | organization_policies | A map of policies that will be created and later attached to an account or OU. | `any` | `{}` | no |
